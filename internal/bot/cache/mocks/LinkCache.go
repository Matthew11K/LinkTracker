// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/central-university-dev/go-Matthew11K/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// LinkCache is an autogenerated mock type for the LinkCache type
type LinkCache struct {
	mock.Mock
}

// DeleteLinks provides a mock function with given fields: ctx, chatID
func (_m *LinkCache) DeleteLinks(ctx context.Context, chatID int64) error {
	ret := _m.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLinks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, chatID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLinks provides a mock function with given fields: ctx, chatID
func (_m *LinkCache) GetLinks(ctx context.Context, chatID int64) ([]*models.Link, error) {
	ret := _m.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for GetLinks")
	}

	var r0 []*models.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*models.Link, error)); ok {
		return rf(ctx, chatID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*models.Link); ok {
		r0 = rf(ctx, chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, chatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetLinks provides a mock function with given fields: ctx, chatID, links
func (_m *LinkCache) SetLinks(ctx context.Context, chatID int64, links []*models.Link) error {
	ret := _m.Called(ctx, chatID, links)

	if len(ret) == 0 {
		panic("no return value specified for SetLinks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []*models.Link) error); ok {
		r0 = rf(ctx, chatID, links)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLinkCache creates a new instance of LinkCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLinkCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *LinkCache {
	mock := &LinkCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
