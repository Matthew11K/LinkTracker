// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/central-university-dev/go-Matthew11K/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// ChatStateRepository is an autogenerated mock type for the ChatStateRepository type
type ChatStateRepository struct {
	mock.Mock
}

// ClearData provides a mock function with given fields: ctx, chatID
func (_m *ChatStateRepository) ClearData(ctx context.Context, chatID int64) error {
	ret := _m.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for ClearData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, chatID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetData provides a mock function with given fields: ctx, chatID, key
func (_m *ChatStateRepository) GetData(ctx context.Context, chatID int64, key string) (interface{}, error) {
	ret := _m.Called(ctx, chatID, key)

	if len(ret) == 0 {
		panic("no return value specified for GetData")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (interface{}, error)); ok {
		return rf(ctx, chatID, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) interface{}); ok {
		r0 = rf(ctx, chatID, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, chatID, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetState provides a mock function with given fields: ctx, chatID
func (_m *ChatStateRepository) GetState(ctx context.Context, chatID int64) (models.ChatState, error) {
	ret := _m.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for GetState")
	}

	var r0 models.ChatState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (models.ChatState, error)); ok {
		return rf(ctx, chatID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) models.ChatState); ok {
		r0 = rf(ctx, chatID)
	} else {
		r0 = ret.Get(0).(models.ChatState)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, chatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetData provides a mock function with given fields: ctx, chatID, key, value
func (_m *ChatStateRepository) SetData(ctx context.Context, chatID int64, key string, value interface{}) error {
	ret := _m.Called(ctx, chatID, key, value)

	if len(ret) == 0 {
		panic("no return value specified for SetData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, interface{}) error); ok {
		r0 = rf(ctx, chatID, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetState provides a mock function with given fields: ctx, chatID, state
func (_m *ChatStateRepository) SetState(ctx context.Context, chatID int64, state models.ChatState) error {
	ret := _m.Called(ctx, chatID, state)

	if len(ret) == 0 {
		panic("no return value specified for SetState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, models.ChatState) error); ok {
		r0 = rf(ctx, chatID, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewChatStateRepository creates a new instance of ChatStateRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatStateRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatStateRepository {
	mock := &ChatStateRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
