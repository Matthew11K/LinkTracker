// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/central-university-dev/go-Matthew11K/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// ScrapperService is an autogenerated mock type for the ScrapperService type
type ScrapperService struct {
	mock.Mock
}

// AddLink provides a mock function with given fields: ctx, chatID, url, tags, filters
func (_m *ScrapperService) AddLink(ctx context.Context, chatID int64, url string, tags []string, filters []string) (*models.Link, error) {
	ret := _m.Called(ctx, chatID, url, tags, filters)

	if len(ret) == 0 {
		panic("no return value specified for AddLink")
	}

	var r0 *models.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, []string, []string) (*models.Link, error)); ok {
		return rf(ctx, chatID, url, tags, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, []string, []string) *models.Link); ok {
		r0 = rf(ctx, chatID, url, tags, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string, []string, []string) error); ok {
		r1 = rf(ctx, chatID, url, tags, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckUpdates provides a mock function with given fields: ctx
func (_m *ScrapperService) CheckUpdates(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CheckUpdates")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteChat provides a mock function with given fields: ctx, chatID
func (_m *ScrapperService) DeleteChat(ctx context.Context, chatID int64) error {
	ret := _m.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, chatID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLinks provides a mock function with given fields: ctx, chatID
func (_m *ScrapperService) GetLinks(ctx context.Context, chatID int64) ([]*models.Link, error) {
	ret := _m.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for GetLinks")
	}

	var r0 []*models.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*models.Link, error)); ok {
		return rf(ctx, chatID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*models.Link); ok {
		r0 = rf(ctx, chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, chatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterChat provides a mock function with given fields: ctx, chatID
func (_m *ScrapperService) RegisterChat(ctx context.Context, chatID int64) error {
	ret := _m.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for RegisterChat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, chatID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveLink provides a mock function with given fields: ctx, chatID, url
func (_m *ScrapperService) RemoveLink(ctx context.Context, chatID int64, url string) (*models.Link, error) {
	ret := _m.Called(ctx, chatID, url)

	if len(ret) == 0 {
		panic("no return value specified for RemoveLink")
	}

	var r0 *models.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (*models.Link, error)); ok {
		return rf(ctx, chatID, url)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) *models.Link); ok {
		r0 = rf(ctx, chatID, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, chatID, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewScrapperService creates a new instance of ScrapperService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScrapperService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScrapperService {
	mock := &ScrapperService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
