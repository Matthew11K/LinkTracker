// Code generated by ogen, DO NOT EDIT.

package v1_scrapper

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// DigestGet implements GET /digest operation.
	//
	// Получить дайджест обновлений ссылок.
	//
	// GET /digest
	DigestGet(ctx context.Context, params DigestGetParams) (DigestGetRes, error)
	// LinksDelete implements DELETE /links operation.
	//
	// Убрать отслеживание ссылки.
	//
	// DELETE /links
	LinksDelete(ctx context.Context, req *RemoveLinkRequest, params LinksDeleteParams) (LinksDeleteRes, error)
	// LinksGet implements GET /links operation.
	//
	// Получить все отслеживаемые ссылки.
	//
	// GET /links
	LinksGet(ctx context.Context, params LinksGetParams) (LinksGetRes, error)
	// LinksPost implements POST /links operation.
	//
	// Добавить отслеживание ссылки.
	//
	// POST /links
	LinksPost(ctx context.Context, req *AddLinkRequest, params LinksPostParams) (LinksPostRes, error)
	// TgChatIDDelete implements DELETE /tg-chat/{id} operation.
	//
	// Удалить чат.
	//
	// DELETE /tg-chat/{id}
	TgChatIDDelete(ctx context.Context, params TgChatIDDeleteParams) (TgChatIDDeleteRes, error)
	// TgChatIDPost implements POST /tg-chat/{id} operation.
	//
	// Зарегистрировать чат.
	//
	// POST /tg-chat/{id}
	TgChatIDPost(ctx context.Context, req OptChatSettings, params TgChatIDPostParams) (TgChatIDPostRes, error)
	// TgChatIDPut implements PUT /tg-chat/{id} operation.
	//
	// Обновить настройки чата.
	//
	// PUT /tg-chat/{id}
	TgChatIDPut(ctx context.Context, req *ChatSettings, params TgChatIDPutParams) (TgChatIDPutRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
