// Code generated by ogen, DO NOT EDIT.

package v1_scrapper

import (
	"net/url"
	"time"

	"github.com/go-faster/errors"
)

// Ref: #/components/schemas/AddLinkRequest
type AddLinkRequest struct {
	Link    OptURI   `json:"link"`
	Tags    []string `json:"tags"`
	Filters []string `json:"filters"`
}

// GetLink returns the value of Link.
func (s *AddLinkRequest) GetLink() OptURI {
	return s.Link
}

// GetTags returns the value of Tags.
func (s *AddLinkRequest) GetTags() []string {
	return s.Tags
}

// GetFilters returns the value of Filters.
func (s *AddLinkRequest) GetFilters() []string {
	return s.Filters
}

// SetLink sets the value of Link.
func (s *AddLinkRequest) SetLink(val OptURI) {
	s.Link = val
}

// SetTags sets the value of Tags.
func (s *AddLinkRequest) SetTags(val []string) {
	s.Tags = val
}

// SetFilters sets the value of Filters.
func (s *AddLinkRequest) SetFilters(val []string) {
	s.Filters = val
}

// Ref: #/components/schemas/ApiErrorResponse
type ApiErrorResponse struct {
	Description      OptString `json:"description"`
	Code             OptString `json:"code"`
	ExceptionName    OptString `json:"exceptionName"`
	ExceptionMessage OptString `json:"exceptionMessage"`
	Stacktrace       []string  `json:"stacktrace"`
}

// GetDescription returns the value of Description.
func (s *ApiErrorResponse) GetDescription() OptString {
	return s.Description
}

// GetCode returns the value of Code.
func (s *ApiErrorResponse) GetCode() OptString {
	return s.Code
}

// GetExceptionName returns the value of ExceptionName.
func (s *ApiErrorResponse) GetExceptionName() OptString {
	return s.ExceptionName
}

// GetExceptionMessage returns the value of ExceptionMessage.
func (s *ApiErrorResponse) GetExceptionMessage() OptString {
	return s.ExceptionMessage
}

// GetStacktrace returns the value of Stacktrace.
func (s *ApiErrorResponse) GetStacktrace() []string {
	return s.Stacktrace
}

// SetDescription sets the value of Description.
func (s *ApiErrorResponse) SetDescription(val OptString) {
	s.Description = val
}

// SetCode sets the value of Code.
func (s *ApiErrorResponse) SetCode(val OptString) {
	s.Code = val
}

// SetExceptionName sets the value of ExceptionName.
func (s *ApiErrorResponse) SetExceptionName(val OptString) {
	s.ExceptionName = val
}

// SetExceptionMessage sets the value of ExceptionMessage.
func (s *ApiErrorResponse) SetExceptionMessage(val OptString) {
	s.ExceptionMessage = val
}

// SetStacktrace sets the value of Stacktrace.
func (s *ApiErrorResponse) SetStacktrace(val []string) {
	s.Stacktrace = val
}

func (*ApiErrorResponse) digestGetRes()    {}
func (*ApiErrorResponse) linksGetRes()     {}
func (*ApiErrorResponse) linksPostRes()    {}
func (*ApiErrorResponse) tgChatIDPostRes() {}

// Ref: #/components/schemas/ChatSettings
type ChatSettings struct {
	NotificationMode OptChatSettingsNotificationMode `json:"notificationMode"`
	DigestTime       OptTime                         `json:"digestTime"`
}

// GetNotificationMode returns the value of NotificationMode.
func (s *ChatSettings) GetNotificationMode() OptChatSettingsNotificationMode {
	return s.NotificationMode
}

// GetDigestTime returns the value of DigestTime.
func (s *ChatSettings) GetDigestTime() OptTime {
	return s.DigestTime
}

// SetNotificationMode sets the value of NotificationMode.
func (s *ChatSettings) SetNotificationMode(val OptChatSettingsNotificationMode) {
	s.NotificationMode = val
}

// SetDigestTime sets the value of DigestTime.
func (s *ChatSettings) SetDigestTime(val OptTime) {
	s.DigestTime = val
}

type ChatSettingsNotificationMode string

const (
	ChatSettingsNotificationModeInstant ChatSettingsNotificationMode = "instant"
	ChatSettingsNotificationModeDigest  ChatSettingsNotificationMode = "digest"
)

// AllValues returns all ChatSettingsNotificationMode values.
func (ChatSettingsNotificationMode) AllValues() []ChatSettingsNotificationMode {
	return []ChatSettingsNotificationMode{
		ChatSettingsNotificationModeInstant,
		ChatSettingsNotificationModeDigest,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChatSettingsNotificationMode) MarshalText() ([]byte, error) {
	switch s {
	case ChatSettingsNotificationModeInstant:
		return []byte(s), nil
	case ChatSettingsNotificationModeDigest:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChatSettingsNotificationMode) UnmarshalText(data []byte) error {
	switch ChatSettingsNotificationMode(data) {
	case ChatSettingsNotificationModeInstant:
		*s = ChatSettingsNotificationModeInstant
		return nil
	case ChatSettingsNotificationModeDigest:
		*s = ChatSettingsNotificationModeDigest
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/DigestResponse
type DigestResponse struct {
	Updates []LinkUpdate `json:"updates"`
	Size    OptInt32     `json:"size"`
}

// GetUpdates returns the value of Updates.
func (s *DigestResponse) GetUpdates() []LinkUpdate {
	return s.Updates
}

// GetSize returns the value of Size.
func (s *DigestResponse) GetSize() OptInt32 {
	return s.Size
}

// SetUpdates sets the value of Updates.
func (s *DigestResponse) SetUpdates(val []LinkUpdate) {
	s.Updates = val
}

// SetSize sets the value of Size.
func (s *DigestResponse) SetSize(val OptInt32) {
	s.Size = val
}

func (*DigestResponse) digestGetRes() {}

// Ref: #/components/schemas/LinkResponse
type LinkResponse struct {
	ID      OptInt64 `json:"id"`
	URL     OptURI   `json:"url"`
	Tags    []string `json:"tags"`
	Filters []string `json:"filters"`
}

// GetID returns the value of ID.
func (s *LinkResponse) GetID() OptInt64 {
	return s.ID
}

// GetURL returns the value of URL.
func (s *LinkResponse) GetURL() OptURI {
	return s.URL
}

// GetTags returns the value of Tags.
func (s *LinkResponse) GetTags() []string {
	return s.Tags
}

// GetFilters returns the value of Filters.
func (s *LinkResponse) GetFilters() []string {
	return s.Filters
}

// SetID sets the value of ID.
func (s *LinkResponse) SetID(val OptInt64) {
	s.ID = val
}

// SetURL sets the value of URL.
func (s *LinkResponse) SetURL(val OptURI) {
	s.URL = val
}

// SetTags sets the value of Tags.
func (s *LinkResponse) SetTags(val []string) {
	s.Tags = val
}

// SetFilters sets the value of Filters.
func (s *LinkResponse) SetFilters(val []string) {
	s.Filters = val
}

func (*LinkResponse) linksDeleteRes() {}
func (*LinkResponse) linksPostRes()   {}

// Ref: #/components/schemas/LinkUpdate
type LinkUpdate struct {
	ID              OptInt64    `json:"id"`
	URL             OptURI      `json:"url"`
	Description     OptString   `json:"description"`
	UpdateTimestamp OptDateTime `json:"updateTimestamp"`
}

// GetID returns the value of ID.
func (s *LinkUpdate) GetID() OptInt64 {
	return s.ID
}

// GetURL returns the value of URL.
func (s *LinkUpdate) GetURL() OptURI {
	return s.URL
}

// GetDescription returns the value of Description.
func (s *LinkUpdate) GetDescription() OptString {
	return s.Description
}

// GetUpdateTimestamp returns the value of UpdateTimestamp.
func (s *LinkUpdate) GetUpdateTimestamp() OptDateTime {
	return s.UpdateTimestamp
}

// SetID sets the value of ID.
func (s *LinkUpdate) SetID(val OptInt64) {
	s.ID = val
}

// SetURL sets the value of URL.
func (s *LinkUpdate) SetURL(val OptURI) {
	s.URL = val
}

// SetDescription sets the value of Description.
func (s *LinkUpdate) SetDescription(val OptString) {
	s.Description = val
}

// SetUpdateTimestamp sets the value of UpdateTimestamp.
func (s *LinkUpdate) SetUpdateTimestamp(val OptDateTime) {
	s.UpdateTimestamp = val
}

type LinksDeleteBadRequest ApiErrorResponse

func (*LinksDeleteBadRequest) linksDeleteRes() {}

type LinksDeleteNotFound ApiErrorResponse

func (*LinksDeleteNotFound) linksDeleteRes() {}

// Ref: #/components/schemas/ListLinksResponse
type ListLinksResponse struct {
	Links []LinkResponse `json:"links"`
	Size  OptInt32       `json:"size"`
}

// GetLinks returns the value of Links.
func (s *ListLinksResponse) GetLinks() []LinkResponse {
	return s.Links
}

// GetSize returns the value of Size.
func (s *ListLinksResponse) GetSize() OptInt32 {
	return s.Size
}

// SetLinks sets the value of Links.
func (s *ListLinksResponse) SetLinks(val []LinkResponse) {
	s.Links = val
}

// SetSize sets the value of Size.
func (s *ListLinksResponse) SetSize(val OptInt32) {
	s.Size = val
}

func (*ListLinksResponse) linksGetRes() {}

// NewOptChatSettings returns new OptChatSettings with value set to v.
func NewOptChatSettings(v ChatSettings) OptChatSettings {
	return OptChatSettings{
		Value: v,
		Set:   true,
	}
}

// OptChatSettings is optional ChatSettings.
type OptChatSettings struct {
	Value ChatSettings
	Set   bool
}

// IsSet returns true if OptChatSettings was set.
func (o OptChatSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatSettings) Reset() {
	var v ChatSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatSettings) SetTo(v ChatSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatSettings) Get() (v ChatSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChatSettings) Or(d ChatSettings) ChatSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChatSettingsNotificationMode returns new OptChatSettingsNotificationMode with value set to v.
func NewOptChatSettingsNotificationMode(v ChatSettingsNotificationMode) OptChatSettingsNotificationMode {
	return OptChatSettingsNotificationMode{
		Value: v,
		Set:   true,
	}
}

// OptChatSettingsNotificationMode is optional ChatSettingsNotificationMode.
type OptChatSettingsNotificationMode struct {
	Value ChatSettingsNotificationMode
	Set   bool
}

// IsSet returns true if OptChatSettingsNotificationMode was set.
func (o OptChatSettingsNotificationMode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatSettingsNotificationMode) Reset() {
	var v ChatSettingsNotificationMode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatSettingsNotificationMode) SetTo(v ChatSettingsNotificationMode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatSettingsNotificationMode) Get() (v ChatSettingsNotificationMode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChatSettingsNotificationMode) Or(d ChatSettingsNotificationMode) ChatSettingsNotificationMode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTime returns new OptTime with value set to v.
func NewOptTime(v time.Time) OptTime {
	return OptTime{
		Value: v,
		Set:   true,
	}
}

// OptTime is optional time.Time.
type OptTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptTime was set.
func (o OptTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURI returns new OptURI with value set to v.
func NewOptURI(v url.URL) OptURI {
	return OptURI{
		Value: v,
		Set:   true,
	}
}

// OptURI is optional url.URL.
type OptURI struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURI was set.
func (o OptURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURI) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURI) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/RemoveLinkRequest
type RemoveLinkRequest struct {
	Link OptURI `json:"link"`
}

// GetLink returns the value of Link.
func (s *RemoveLinkRequest) GetLink() OptURI {
	return s.Link
}

// SetLink sets the value of Link.
func (s *RemoveLinkRequest) SetLink(val OptURI) {
	s.Link = val
}

type TgChatIDDeleteBadRequest ApiErrorResponse

func (*TgChatIDDeleteBadRequest) tgChatIDDeleteRes() {}

type TgChatIDDeleteNotFound ApiErrorResponse

func (*TgChatIDDeleteNotFound) tgChatIDDeleteRes() {}

// TgChatIDDeleteOK is response for TgChatIDDelete operation.
type TgChatIDDeleteOK struct{}

func (*TgChatIDDeleteOK) tgChatIDDeleteRes() {}

// TgChatIDPostOK is response for TgChatIDPost operation.
type TgChatIDPostOK struct{}

func (*TgChatIDPostOK) tgChatIDPostRes() {}

type TgChatIDPutBadRequest ApiErrorResponse

func (*TgChatIDPutBadRequest) tgChatIDPutRes() {}

type TgChatIDPutNotFound ApiErrorResponse

func (*TgChatIDPutNotFound) tgChatIDPutRes() {}

// TgChatIDPutOK is response for TgChatIDPut operation.
type TgChatIDPutOK struct{}

func (*TgChatIDPutOK) tgChatIDPutRes() {}
