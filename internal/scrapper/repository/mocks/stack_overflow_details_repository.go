// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/central-university-dev/go-Matthew11K/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// StackOverflowDetailsRepository is an autogenerated mock type for the StackOverflowDetailsRepository type
type StackOverflowDetailsRepository struct {
	mock.Mock
}

type StackOverflowDetailsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *StackOverflowDetailsRepository) EXPECT() *StackOverflowDetailsRepository_Expecter {
	return &StackOverflowDetailsRepository_Expecter{mock: &_m.Mock}
}

// FindByLinkID provides a mock function with given fields: ctx, linkID
func (_m *StackOverflowDetailsRepository) FindByLinkID(ctx context.Context, linkID int64) (*models.StackOverflowDetails, error) {
	ret := _m.Called(ctx, linkID)

	if len(ret) == 0 {
		panic("no return value specified for FindByLinkID")
	}

	var r0 *models.StackOverflowDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.StackOverflowDetails, error)); ok {
		return rf(ctx, linkID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.StackOverflowDetails); ok {
		r0 = rf(ctx, linkID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.StackOverflowDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, linkID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StackOverflowDetailsRepository_FindByLinkID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByLinkID'
type StackOverflowDetailsRepository_FindByLinkID_Call struct {
	*mock.Call
}

// FindByLinkID is a helper method to define mock.On call
//   - ctx context.Context
//   - linkID int64
func (_e *StackOverflowDetailsRepository_Expecter) FindByLinkID(ctx interface{}, linkID interface{}) *StackOverflowDetailsRepository_FindByLinkID_Call {
	return &StackOverflowDetailsRepository_FindByLinkID_Call{Call: _e.mock.On("FindByLinkID", ctx, linkID)}
}

func (_c *StackOverflowDetailsRepository_FindByLinkID_Call) Run(run func(ctx context.Context, linkID int64)) *StackOverflowDetailsRepository_FindByLinkID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *StackOverflowDetailsRepository_FindByLinkID_Call) Return(_a0 *models.StackOverflowDetails, _a1 error) *StackOverflowDetailsRepository_FindByLinkID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StackOverflowDetailsRepository_FindByLinkID_Call) RunAndReturn(run func(context.Context, int64) (*models.StackOverflowDetails, error)) *StackOverflowDetailsRepository_FindByLinkID_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, details
func (_m *StackOverflowDetailsRepository) Save(ctx context.Context, details *models.StackOverflowDetails) error {
	ret := _m.Called(ctx, details)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.StackOverflowDetails) error); ok {
		r0 = rf(ctx, details)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StackOverflowDetailsRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type StackOverflowDetailsRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - details *models.StackOverflowDetails
func (_e *StackOverflowDetailsRepository_Expecter) Save(ctx interface{}, details interface{}) *StackOverflowDetailsRepository_Save_Call {
	return &StackOverflowDetailsRepository_Save_Call{Call: _e.mock.On("Save", ctx, details)}
}

func (_c *StackOverflowDetailsRepository_Save_Call) Run(run func(ctx context.Context, details *models.StackOverflowDetails)) *StackOverflowDetailsRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.StackOverflowDetails))
	})
	return _c
}

func (_c *StackOverflowDetailsRepository_Save_Call) Return(_a0 error) *StackOverflowDetailsRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StackOverflowDetailsRepository_Save_Call) RunAndReturn(run func(context.Context, *models.StackOverflowDetails) error) *StackOverflowDetailsRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, details
func (_m *StackOverflowDetailsRepository) Update(ctx context.Context, details *models.StackOverflowDetails) error {
	ret := _m.Called(ctx, details)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.StackOverflowDetails) error); ok {
		r0 = rf(ctx, details)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StackOverflowDetailsRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type StackOverflowDetailsRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - details *models.StackOverflowDetails
func (_e *StackOverflowDetailsRepository_Expecter) Update(ctx interface{}, details interface{}) *StackOverflowDetailsRepository_Update_Call {
	return &StackOverflowDetailsRepository_Update_Call{Call: _e.mock.On("Update", ctx, details)}
}

func (_c *StackOverflowDetailsRepository_Update_Call) Run(run func(ctx context.Context, details *models.StackOverflowDetails)) *StackOverflowDetailsRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.StackOverflowDetails))
	})
	return _c
}

func (_c *StackOverflowDetailsRepository_Update_Call) Return(_a0 error) *StackOverflowDetailsRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StackOverflowDetailsRepository_Update_Call) RunAndReturn(run func(context.Context, *models.StackOverflowDetails) error) *StackOverflowDetailsRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewStackOverflowDetailsRepository creates a new instance of StackOverflowDetailsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStackOverflowDetailsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StackOverflowDetailsRepository {
	mock := &StackOverflowDetailsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
