// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/central-university-dev/go-Matthew11K/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// ChatRepository is an autogenerated mock type for the ChatRepository type
type ChatRepository struct {
	mock.Mock
}

type ChatRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ChatRepository) EXPECT() *ChatRepository_Expecter {
	return &ChatRepository_Expecter{mock: &_m.Mock}
}

// AddLink provides a mock function with given fields: ctx, chatID, linkID
func (_m *ChatRepository) AddLink(ctx context.Context, chatID int64, linkID int64) error {
	ret := _m.Called(ctx, chatID, linkID)

	if len(ret) == 0 {
		panic("no return value specified for AddLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, chatID, linkID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChatRepository_AddLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLink'
type ChatRepository_AddLink_Call struct {
	*mock.Call
}

// AddLink is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
//   - linkID int64
func (_e *ChatRepository_Expecter) AddLink(ctx interface{}, chatID interface{}, linkID interface{}) *ChatRepository_AddLink_Call {
	return &ChatRepository_AddLink_Call{Call: _e.mock.On("AddLink", ctx, chatID, linkID)}
}

func (_c *ChatRepository_AddLink_Call) Run(run func(ctx context.Context, chatID int64, linkID int64)) *ChatRepository_AddLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *ChatRepository_AddLink_Call) Return(_a0 error) *ChatRepository_AddLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChatRepository_AddLink_Call) RunAndReturn(run func(context.Context, int64, int64) error) *ChatRepository_AddLink_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ChatRepository) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChatRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ChatRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *ChatRepository_Expecter) Delete(ctx interface{}, id interface{}) *ChatRepository_Delete_Call {
	return &ChatRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *ChatRepository_Delete_Call) Run(run func(ctx context.Context, id int64)) *ChatRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *ChatRepository_Delete_Call) Return(_a0 error) *ChatRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChatRepository_Delete_Call) RunAndReturn(run func(context.Context, int64) error) *ChatRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *ChatRepository) FindByID(ctx context.Context, id int64) (*models.Chat, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *models.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.Chat, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.Chat); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChatRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type ChatRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *ChatRepository_Expecter) FindByID(ctx interface{}, id interface{}) *ChatRepository_FindByID_Call {
	return &ChatRepository_FindByID_Call{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *ChatRepository_FindByID_Call) Run(run func(ctx context.Context, id int64)) *ChatRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *ChatRepository_FindByID_Call) Return(_a0 *models.Chat, _a1 error) *ChatRepository_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChatRepository_FindByID_Call) RunAndReturn(run func(context.Context, int64) (*models.Chat, error)) *ChatRepository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByLinkID provides a mock function with given fields: ctx, linkID
func (_m *ChatRepository) FindByLinkID(ctx context.Context, linkID int64) ([]*models.Chat, error) {
	ret := _m.Called(ctx, linkID)

	if len(ret) == 0 {
		panic("no return value specified for FindByLinkID")
	}

	var r0 []*models.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*models.Chat, error)); ok {
		return rf(ctx, linkID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*models.Chat); ok {
		r0 = rf(ctx, linkID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, linkID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChatRepository_FindByLinkID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByLinkID'
type ChatRepository_FindByLinkID_Call struct {
	*mock.Call
}

// FindByLinkID is a helper method to define mock.On call
//   - ctx context.Context
//   - linkID int64
func (_e *ChatRepository_Expecter) FindByLinkID(ctx interface{}, linkID interface{}) *ChatRepository_FindByLinkID_Call {
	return &ChatRepository_FindByLinkID_Call{Call: _e.mock.On("FindByLinkID", ctx, linkID)}
}

func (_c *ChatRepository_FindByLinkID_Call) Run(run func(ctx context.Context, linkID int64)) *ChatRepository_FindByLinkID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *ChatRepository_FindByLinkID_Call) Return(_a0 []*models.Chat, _a1 error) *ChatRepository_FindByLinkID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChatRepository_FindByLinkID_Call) RunAndReturn(run func(context.Context, int64) ([]*models.Chat, error)) *ChatRepository_FindByLinkID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx
func (_m *ChatRepository) GetAll(ctx context.Context) ([]*models.Chat, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*models.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Chat, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Chat); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChatRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type ChatRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ChatRepository_Expecter) GetAll(ctx interface{}) *ChatRepository_GetAll_Call {
	return &ChatRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *ChatRepository_GetAll_Call) Run(run func(ctx context.Context)) *ChatRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ChatRepository_GetAll_Call) Return(_a0 []*models.Chat, _a1 error) *ChatRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChatRepository_GetAll_Call) RunAndReturn(run func(context.Context) ([]*models.Chat, error)) *ChatRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveLink provides a mock function with given fields: ctx, chatID, linkID
func (_m *ChatRepository) RemoveLink(ctx context.Context, chatID int64, linkID int64) error {
	ret := _m.Called(ctx, chatID, linkID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, chatID, linkID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChatRepository_RemoveLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveLink'
type ChatRepository_RemoveLink_Call struct {
	*mock.Call
}

// RemoveLink is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
//   - linkID int64
func (_e *ChatRepository_Expecter) RemoveLink(ctx interface{}, chatID interface{}, linkID interface{}) *ChatRepository_RemoveLink_Call {
	return &ChatRepository_RemoveLink_Call{Call: _e.mock.On("RemoveLink", ctx, chatID, linkID)}
}

func (_c *ChatRepository_RemoveLink_Call) Run(run func(ctx context.Context, chatID int64, linkID int64)) *ChatRepository_RemoveLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *ChatRepository_RemoveLink_Call) Return(_a0 error) *ChatRepository_RemoveLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChatRepository_RemoveLink_Call) RunAndReturn(run func(context.Context, int64, int64) error) *ChatRepository_RemoveLink_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, chat
func (_m *ChatRepository) Save(ctx context.Context, chat *models.Chat) error {
	ret := _m.Called(ctx, chat)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Chat) error); ok {
		r0 = rf(ctx, chat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChatRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type ChatRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - chat *models.Chat
func (_e *ChatRepository_Expecter) Save(ctx interface{}, chat interface{}) *ChatRepository_Save_Call {
	return &ChatRepository_Save_Call{Call: _e.mock.On("Save", ctx, chat)}
}

func (_c *ChatRepository_Save_Call) Run(run func(ctx context.Context, chat *models.Chat)) *ChatRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Chat))
	})
	return _c
}

func (_c *ChatRepository_Save_Call) Return(_a0 error) *ChatRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChatRepository_Save_Call) RunAndReturn(run func(context.Context, *models.Chat) error) *ChatRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, chat
func (_m *ChatRepository) Update(ctx context.Context, chat *models.Chat) error {
	ret := _m.Called(ctx, chat)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Chat) error); ok {
		r0 = rf(ctx, chat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChatRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ChatRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - chat *models.Chat
func (_e *ChatRepository_Expecter) Update(ctx interface{}, chat interface{}) *ChatRepository_Update_Call {
	return &ChatRepository_Update_Call{Call: _e.mock.On("Update", ctx, chat)}
}

func (_c *ChatRepository_Update_Call) Run(run func(ctx context.Context, chat *models.Chat)) *ChatRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Chat))
	})
	return _c
}

func (_c *ChatRepository_Update_Call) Return(_a0 error) *ChatRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChatRepository_Update_Call) RunAndReturn(run func(context.Context, *models.Chat) error) *ChatRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewChatRepository creates a new instance of ChatRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatRepository {
	mock := &ChatRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
