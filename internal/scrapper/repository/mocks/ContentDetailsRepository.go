// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/central-university-dev/go-Matthew11K/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// ContentDetailsRepository is an autogenerated mock type for the ContentDetailsRepository type
type ContentDetailsRepository struct {
	mock.Mock
}

// FindByLinkID provides a mock function with given fields: ctx, linkID
func (_m *ContentDetailsRepository) FindByLinkID(ctx context.Context, linkID int64) (*models.ContentDetails, error) {
	ret := _m.Called(ctx, linkID)

	if len(ret) == 0 {
		panic("no return value specified for FindByLinkID")
	}

	var r0 *models.ContentDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.ContentDetails, error)); ok {
		return rf(ctx, linkID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.ContentDetails); ok {
		r0 = rf(ctx, linkID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ContentDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, linkID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, details
func (_m *ContentDetailsRepository) Save(ctx context.Context, details *models.ContentDetails) error {
	ret := _m.Called(ctx, details)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.ContentDetails) error); ok {
		r0 = rf(ctx, details)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, details
func (_m *ContentDetailsRepository) Update(ctx context.Context, details *models.ContentDetails) error {
	ret := _m.Called(ctx, details)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.ContentDetails) error); ok {
		r0 = rf(ctx, details)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewContentDetailsRepository creates a new instance of ContentDetailsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContentDetailsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContentDetailsRepository {
	mock := &ContentDetailsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
