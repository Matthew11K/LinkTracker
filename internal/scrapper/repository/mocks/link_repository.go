// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/central-university-dev/go-Matthew11K/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// LinkRepository is an autogenerated mock type for the LinkRepository type
type LinkRepository struct {
	mock.Mock
}

type LinkRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *LinkRepository) EXPECT() *LinkRepository_Expecter {
	return &LinkRepository_Expecter{mock: &_m.Mock}
}

// AddChatLink provides a mock function with given fields: ctx, chatID, linkID
func (_m *LinkRepository) AddChatLink(ctx context.Context, chatID int64, linkID int64) error {
	ret := _m.Called(ctx, chatID, linkID)

	if len(ret) == 0 {
		panic("no return value specified for AddChatLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, chatID, linkID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LinkRepository_AddChatLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddChatLink'
type LinkRepository_AddChatLink_Call struct {
	*mock.Call
}

// AddChatLink is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
//   - linkID int64
func (_e *LinkRepository_Expecter) AddChatLink(ctx interface{}, chatID interface{}, linkID interface{}) *LinkRepository_AddChatLink_Call {
	return &LinkRepository_AddChatLink_Call{Call: _e.mock.On("AddChatLink", ctx, chatID, linkID)}
}

func (_c *LinkRepository_AddChatLink_Call) Run(run func(ctx context.Context, chatID int64, linkID int64)) *LinkRepository_AddChatLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *LinkRepository_AddChatLink_Call) Return(_a0 error) *LinkRepository_AddChatLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LinkRepository_AddChatLink_Call) RunAndReturn(run func(context.Context, int64, int64) error) *LinkRepository_AddChatLink_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByURL provides a mock function with given fields: ctx, url, chatID
func (_m *LinkRepository) DeleteByURL(ctx context.Context, url string, chatID int64) error {
	ret := _m.Called(ctx, url, chatID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByURL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = rf(ctx, url, chatID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LinkRepository_DeleteByURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByURL'
type LinkRepository_DeleteByURL_Call struct {
	*mock.Call
}

// DeleteByURL is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
//   - chatID int64
func (_e *LinkRepository_Expecter) DeleteByURL(ctx interface{}, url interface{}, chatID interface{}) *LinkRepository_DeleteByURL_Call {
	return &LinkRepository_DeleteByURL_Call{Call: _e.mock.On("DeleteByURL", ctx, url, chatID)}
}

func (_c *LinkRepository_DeleteByURL_Call) Run(run func(ctx context.Context, url string, chatID int64)) *LinkRepository_DeleteByURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *LinkRepository_DeleteByURL_Call) Return(_a0 error) *LinkRepository_DeleteByURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LinkRepository_DeleteByURL_Call) RunAndReturn(run func(context.Context, string, int64) error) *LinkRepository_DeleteByURL_Call {
	_c.Call.Return(run)
	return _c
}

// FindByChatID provides a mock function with given fields: ctx, chatID
func (_m *LinkRepository) FindByChatID(ctx context.Context, chatID int64) ([]*models.Link, error) {
	ret := _m.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for FindByChatID")
	}

	var r0 []*models.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*models.Link, error)); ok {
		return rf(ctx, chatID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*models.Link); ok {
		r0 = rf(ctx, chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, chatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkRepository_FindByChatID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByChatID'
type LinkRepository_FindByChatID_Call struct {
	*mock.Call
}

// FindByChatID is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
func (_e *LinkRepository_Expecter) FindByChatID(ctx interface{}, chatID interface{}) *LinkRepository_FindByChatID_Call {
	return &LinkRepository_FindByChatID_Call{Call: _e.mock.On("FindByChatID", ctx, chatID)}
}

func (_c *LinkRepository_FindByChatID_Call) Run(run func(ctx context.Context, chatID int64)) *LinkRepository_FindByChatID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *LinkRepository_FindByChatID_Call) Return(_a0 []*models.Link, _a1 error) *LinkRepository_FindByChatID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LinkRepository_FindByChatID_Call) RunAndReturn(run func(context.Context, int64) ([]*models.Link, error)) *LinkRepository_FindByChatID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *LinkRepository) FindByID(ctx context.Context, id int64) (*models.Link, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *models.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.Link, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.Link); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type LinkRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *LinkRepository_Expecter) FindByID(ctx interface{}, id interface{}) *LinkRepository_FindByID_Call {
	return &LinkRepository_FindByID_Call{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *LinkRepository_FindByID_Call) Run(run func(ctx context.Context, id int64)) *LinkRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *LinkRepository_FindByID_Call) Return(_a0 *models.Link, _a1 error) *LinkRepository_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LinkRepository_FindByID_Call) RunAndReturn(run func(context.Context, int64) (*models.Link, error)) *LinkRepository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByURL provides a mock function with given fields: ctx, url
func (_m *LinkRepository) FindByURL(ctx context.Context, url string) (*models.Link, error) {
	ret := _m.Called(ctx, url)

	if len(ret) == 0 {
		panic("no return value specified for FindByURL")
	}

	var r0 *models.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Link, error)); ok {
		return rf(ctx, url)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Link); ok {
		r0 = rf(ctx, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkRepository_FindByURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByURL'
type LinkRepository_FindByURL_Call struct {
	*mock.Call
}

// FindByURL is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
func (_e *LinkRepository_Expecter) FindByURL(ctx interface{}, url interface{}) *LinkRepository_FindByURL_Call {
	return &LinkRepository_FindByURL_Call{Call: _e.mock.On("FindByURL", ctx, url)}
}

func (_c *LinkRepository_FindByURL_Call) Run(run func(ctx context.Context, url string)) *LinkRepository_FindByURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *LinkRepository_FindByURL_Call) Return(_a0 *models.Link, _a1 error) *LinkRepository_FindByURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LinkRepository_FindByURL_Call) RunAndReturn(run func(context.Context, string) (*models.Link, error)) *LinkRepository_FindByURL_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, link
func (_m *LinkRepository) Save(ctx context.Context, link *models.Link) error {
	ret := _m.Called(ctx, link)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Link) error); ok {
		r0 = rf(ctx, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LinkRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type LinkRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - link *models.Link
func (_e *LinkRepository_Expecter) Save(ctx interface{}, link interface{}) *LinkRepository_Save_Call {
	return &LinkRepository_Save_Call{Call: _e.mock.On("Save", ctx, link)}
}

func (_c *LinkRepository_Save_Call) Run(run func(ctx context.Context, link *models.Link)) *LinkRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Link))
	})
	return _c
}

func (_c *LinkRepository_Save_Call) Return(_a0 error) *LinkRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LinkRepository_Save_Call) RunAndReturn(run func(context.Context, *models.Link) error) *LinkRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, link
func (_m *LinkRepository) Update(ctx context.Context, link *models.Link) error {
	ret := _m.Called(ctx, link)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Link) error); ok {
		r0 = rf(ctx, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LinkRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type LinkRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - link *models.Link
func (_e *LinkRepository_Expecter) Update(ctx interface{}, link interface{}) *LinkRepository_Update_Call {
	return &LinkRepository_Update_Call{Call: _e.mock.On("Update", ctx, link)}
}

func (_c *LinkRepository_Update_Call) Run(run func(ctx context.Context, link *models.Link)) *LinkRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Link))
	})
	return _c
}

func (_c *LinkRepository_Update_Call) Return(_a0 error) *LinkRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LinkRepository_Update_Call) RunAndReturn(run func(context.Context, *models.Link) error) *LinkRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewLinkRepository creates a new instance of LinkRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLinkRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *LinkRepository {
	mock := &LinkRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
