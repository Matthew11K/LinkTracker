// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/central-university-dev/go-Matthew11K/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// LinkProcessor is an autogenerated mock type for the LinkProcessor type
type LinkProcessor struct {
	mock.Mock
}

type LinkProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *LinkProcessor) EXPECT() *LinkProcessor_Expecter {
	return &LinkProcessor_Expecter{mock: &_m.Mock}
}

// ProcessLink provides a mock function with given fields: ctx, link
func (_m *LinkProcessor) ProcessLink(ctx context.Context, link *models.Link) (bool, error) {
	ret := _m.Called(ctx, link)

	if len(ret) == 0 {
		panic("no return value specified for ProcessLink")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Link) (bool, error)); ok {
		return rf(ctx, link)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Link) bool); ok {
		r0 = rf(ctx, link)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Link) error); ok {
		r1 = rf(ctx, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkProcessor_ProcessLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessLink'
type LinkProcessor_ProcessLink_Call struct {
	*mock.Call
}

// ProcessLink is a helper method to define mock.On call
//   - ctx context.Context
//   - link *models.Link
func (_e *LinkProcessor_Expecter) ProcessLink(ctx interface{}, link interface{}) *LinkProcessor_ProcessLink_Call {
	return &LinkProcessor_ProcessLink_Call{Call: _e.mock.On("ProcessLink", ctx, link)}
}

func (_c *LinkProcessor_ProcessLink_Call) Run(run func(ctx context.Context, link *models.Link)) *LinkProcessor_ProcessLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Link))
	})
	return _c
}

func (_c *LinkProcessor_ProcessLink_Call) Return(_a0 bool, _a1 error) *LinkProcessor_ProcessLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LinkProcessor_ProcessLink_Call) RunAndReturn(run func(context.Context, *models.Link) (bool, error)) *LinkProcessor_ProcessLink_Call {
	_c.Call.Return(run)
	return _c
}

// NewLinkProcessor creates a new instance of LinkProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLinkProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *LinkProcessor {
	mock := &LinkProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
