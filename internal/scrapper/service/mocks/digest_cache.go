// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/central-university-dev/go-Matthew11K/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// DigestCache is an autogenerated mock type for the DigestCache type
type DigestCache struct {
	mock.Mock
}

// AddUpdate provides a mock function with given fields: ctx, chatID, update
func (_m *DigestCache) AddUpdate(ctx context.Context, chatID int64, update *models.LinkUpdate) error {
	ret := _m.Called(ctx, chatID, update)

	if len(ret) == 0 {
		panic("no return value specified for AddUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *models.LinkUpdate) error); ok {
		r0 = rf(ctx, chatID, update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClearUpdates provides a mock function with given fields: ctx, chatID
func (_m *DigestCache) ClearUpdates(ctx context.Context, chatID int64) error {
	ret := _m.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for ClearUpdates")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, chatID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with no fields
func (_m *DigestCache) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllChatIDs provides a mock function with given fields: ctx
func (_m *DigestCache) GetAllChatIDs(ctx context.Context) ([]int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllChatIDs")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []int64); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUpdates provides a mock function with given fields: ctx, chatID
func (_m *DigestCache) GetUpdates(ctx context.Context, chatID int64) ([]*models.LinkUpdate, error) {
	ret := _m.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for GetUpdates")
	}

	var r0 []*models.LinkUpdate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*models.LinkUpdate, error)); ok {
		return rf(ctx, chatID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*models.LinkUpdate); ok {
		r0 = rf(ctx, chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.LinkUpdate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, chatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDigestCache creates a new instance of DigestCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDigestCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *DigestCache {
	mock := &DigestCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
