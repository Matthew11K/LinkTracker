// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/central-university-dev/go-Matthew11K/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// BotNotifier is an autogenerated mock type for the BotNotifier type
type BotNotifier struct {
	mock.Mock
}

type BotNotifier_Expecter struct {
	mock *mock.Mock
}

func (_m *BotNotifier) EXPECT() *BotNotifier_Expecter {
	return &BotNotifier_Expecter{mock: &_m.Mock}
}

// SendUpdate provides a mock function with given fields: ctx, update
func (_m *BotNotifier) SendUpdate(ctx context.Context, update *models.LinkUpdate) error {
	ret := _m.Called(ctx, update)

	if len(ret) == 0 {
		panic("no return value specified for SendUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.LinkUpdate) error); ok {
		r0 = rf(ctx, update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BotNotifier_SendUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendUpdate'
type BotNotifier_SendUpdate_Call struct {
	*mock.Call
}

// SendUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - update *models.LinkUpdate
func (_e *BotNotifier_Expecter) SendUpdate(ctx interface{}, update interface{}) *BotNotifier_SendUpdate_Call {
	return &BotNotifier_SendUpdate_Call{Call: _e.mock.On("SendUpdate", ctx, update)}
}

func (_c *BotNotifier_SendUpdate_Call) Run(run func(ctx context.Context, update *models.LinkUpdate)) *BotNotifier_SendUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.LinkUpdate))
	})
	return _c
}

func (_c *BotNotifier_SendUpdate_Call) Return(_a0 error) *BotNotifier_SendUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BotNotifier_SendUpdate_Call) RunAndReturn(run func(context.Context, *models.LinkUpdate) error) *BotNotifier_SendUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// NewBotNotifier creates a new instance of BotNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBotNotifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *BotNotifier {
	mock := &BotNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
