// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/central-university-dev/go-Matthew11K/internal/domain/models"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ChatRepository is an autogenerated mock type for the ChatRepository type
type ChatRepository struct {
	mock.Mock
}

// AddLink provides a mock function with given fields: ctx, chatID, linkID
func (_m *ChatRepository) AddLink(ctx context.Context, chatID int64, linkID int64) error {
	ret := _m.Called(ctx, chatID, linkID)

	if len(ret) == 0 {
		panic("no return value specified for AddLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, chatID, linkID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ChatRepository) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByDigestTime provides a mock function with given fields: ctx, hour, minute
func (_m *ChatRepository) FindByDigestTime(ctx context.Context, hour int, minute int) ([]*models.Chat, error) {
	ret := _m.Called(ctx, hour, minute)

	if len(ret) == 0 {
		panic("no return value specified for FindByDigestTime")
	}

	var r0 []*models.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*models.Chat, error)); ok {
		return rf(ctx, hour, minute)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*models.Chat); ok {
		r0 = rf(ctx, hour, minute)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, hour, minute)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *ChatRepository) FindByID(ctx context.Context, id int64) (*models.Chat, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *models.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.Chat, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.Chat); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByLinkID provides a mock function with given fields: ctx, linkID
func (_m *ChatRepository) FindByLinkID(ctx context.Context, linkID int64) ([]*models.Chat, error) {
	ret := _m.Called(ctx, linkID)

	if len(ret) == 0 {
		panic("no return value specified for FindByLinkID")
	}

	var r0 []*models.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*models.Chat, error)); ok {
		return rf(ctx, linkID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*models.Chat); ok {
		r0 = rf(ctx, linkID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, linkID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *ChatRepository) GetAll(ctx context.Context) ([]*models.Chat, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*models.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Chat, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Chat); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveLink provides a mock function with given fields: ctx, chatID, linkID
func (_m *ChatRepository) RemoveLink(ctx context.Context, chatID int64, linkID int64) error {
	ret := _m.Called(ctx, chatID, linkID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, chatID, linkID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: ctx, chat
func (_m *ChatRepository) Save(ctx context.Context, chat *models.Chat) error {
	ret := _m.Called(ctx, chat)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Chat) error); ok {
		r0 = rf(ctx, chat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, chat
func (_m *ChatRepository) Update(ctx context.Context, chat *models.Chat) error {
	ret := _m.Called(ctx, chat)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Chat) error); ok {
		r0 = rf(ctx, chat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateNotificationSettings provides a mock function with given fields: ctx, chatID, mode, digestTime
func (_m *ChatRepository) UpdateNotificationSettings(ctx context.Context, chatID int64, mode models.NotificationMode, digestTime time.Time) error {
	ret := _m.Called(ctx, chatID, mode, digestTime)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotificationSettings")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, models.NotificationMode, time.Time) error); ok {
		r0 = rf(ctx, chatID, mode, digestTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewChatRepository creates a new instance of ChatRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatRepository {
	mock := &ChatRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
